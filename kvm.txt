## host kvm kernel modules:
/lib/modules/<version>/kernel/arch/x86/kvm: 
kvm.ko, kvm_intel.ko (the module create character device: /dev/kvm)

host hardware support virtualization technologies (cpu, board, network):
VT-x (cpu),
VT-d (chip/device),
VMDq(virtualization device queue),
VMDc(virtualization machine connection)

## Enable VT-x VT-d in BIOS, and verify the option in Host Linux system

root@thinkpad:~# lscpu
Architecture:          x86_64
CPU op-mode(s):        32-bit, 64-bit
Byte Order:            Little Endian
CPU(s):                4
On-line CPU(s) list:   0-3
Thread(s) per core:    2
Core(s) per socket:    2
Socket(s):             1
NUMA node(s):          1
Vendor ID:             GenuineIntel
CPU family:            6
Model:                 58
Model name:            Intel(R) Core(TM) i7-3520M CPU @ 2.90GHz
Stepping:              9
CPU MHz:               1920.230
CPU max MHz:           3600.0000
CPU min MHz:           1200.0000
BogoMIPS:              5787.04
Virtualization:        VT-x
L1d cache:             32K
L1i cache:             32K
L2 cache:              256K
L3 cache:              4096K
NUMA node0 CPU(s):     0-3

VT-d
root@thinkpad:~# dmesg |grep -e DMAR -e IOMMU
[    0.000000] ACPI: DMAR 0x00000000DAFDA000 0000B8 (v01 INTEL  SNB
00000001 INTL 00000001)
[    0.023324] dmar: IOMMU 0: reg_base_addr fed90000 ver 1:0 cap
c0000020e60262 ecap f0101a
[    0.023329] dmar: IOMMU 1: reg_base_addr fed91000 ver 1:0 cap
c9008020660262 ecap f0105a
[    0.023404] IOAPIC id 2 under DRHD base  0xfed91000 IOMMU 1
[    0.554440] AMD IOMMUv2 driver by Joerg Roedel <joerg.roedel@amd.com>
[    0.554442] AMD IOMMUv2 functionality not available on this system

## sync qemu code:  git://git.qemu-project.org/qemu.git
## build qemu with kvm support, depends on some packages
	$ ./configure --prefix=/usr/local/qemu --enable-kvm \
		--target-list="aarch64-softmmu arm-softmmu x86_64-softmmu" \
		--disable-sdl --enable-vhost-net --enable-linux-aio \
		--enable-vnc --enable-docs
	$ make; make install

## qemu monitor
# enter: ctrl+alt+2, exit: ctrl+alt+1
	$ info kvm		# check qemu kvm enable option
	$ info cpus		# check guest system cpu infor

## qemu hardware type info dump
	$ qemu-system-x86_64 -machine help
	$ qemu-system-x86_64 -cpu help
	$ qemu-system-x86_64 -device help		# dump device type
	$ qemu-system-x86_64 -device <dev_type>,help	# dump specific device type args

## qemu command args
	-enable-kvm		# enable kvm option

# qemu smp config
	-smp n[,maxcpus=num][,cores=num][,threads=num][,sockets=num]
		eg: -smp 8,sockets=2,cores=2,threads=2
		    use 'info cpus in QEMU monitor' or 'ps -L' to print in host

# qemu cpu type config
	-cpu <cpu_model>
		eg: -cpu IvyBridge
		    use 'cat /proc/cpuinfo' in QEMU guest system

# qemu cpu affinity config
# guest system use 'isolcpus=2,3' in boot command options
# host system use 'taskset qemu threads'

# qemu memory config
	-m <num MB>
		eg: -m 2048
		    use 'cat /proc/meminfo' & 'free -m' in QEMU guest system

# qemu huge page config
# host system config
	$ getconf PAGESIZE
	$ cat /proc/meminfo |grep Hugepage
	$ mount -t hugetlbfs hugetlbfs /dev/hugepages
	$ sysctl vm.nr_hugepages=1024

# qemu system config (no swappable memory allocate)
	-mem-path /dev/hugepages -mem-prealloc

# qemu storage config (IDE, SCSI, virtio, floppy, flash, sd etc)
	-hda <file> -hdb <file> -hdc <file> -hdd <file>
	-fda <file> ...
	-cdrom <file.iso>
	-mtdblock <file>
	-sd <file>

# qemu storage boot sequence config
	-boot [order=drvs][,once=drvs][,menu=on|off][,splash=splashfile][,splash-time=sp-time]
		order_drv: a,b means floppy, c means first disk, d means cdrom, n network
		eg: -boot order=cd,once=d,menu=on

# qemu image tool: qemu-img command [opt]
	$ qemu-img check [-f fmt] <img>
	$ qemu-img create [-f fmt] [-o options] <img> [size]
	$ qemu-img convert [-f fmt] [-O output_fmt] [-o options] <img_name> <output_name>
	$ qemu-img info [-f fmt] <img>
	$ qemu-img snapshot [-l | -a snap | -c snap | -d snap] <img>
	$ qemu-img resize <img> [+|-] size
	$ qemu-img -h | --help		# dump qemu-img support img types

# qemu storage device -drive config
	-drive option[,option[,option[,...]]]
		file=file
		if=interface		# ide, scsi, sd, mtd, floppy, virtio
		bus=bus_num,unit=unit_num
		index=index
		media=media		# disk, cdrom
		snapshot=snap		# on, off
		cache=cache		# none, writeback, unsafe, directsync, writethrough
		aio=aio			# threads, native
		discard=discard		# ignore, unmap
		addr=addr		# pci address

		eg: typical block device configuration
			# ide disk, guest bootcmd with 'root=/dev/sdax'
			-drive file=img,if=none,id=disk1 \
			-device ide-hd,drive=disk1,bus=ide.0

			# virtio disk, guest bootcmd with 'root=/dev/vdax'
			-drive file=img,if=none,id=disk1 \
			-device virtio-blk-pci,scsi=off,drive=disk1,addr=0x4,bootindex=1
